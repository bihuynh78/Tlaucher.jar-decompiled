/*    */ package org.tlauncher.modpack.domain.client;
/*    */ public class GameEntityDTO { private Long id; private String name; private String author; private String uuid;
/*    */   private String linkProject;
/*    */   private String tlmodsLinkProject;
/*    */   private Map<String, String> descriptions;
/*    */   private String shortDescription;
/*    */   private String description;
/*    */   private String enDescription;
/*    */   private boolean favorite;
/*    */   private GameType type;
/*    */   private List<CategoryDTO> categories;
/*    */   private List<Category> categories1;
/*    */   private List<TagDTO> tags;
/*    */   private Long picture;
/*    */   private List<Long> pictures;
/*    */   
/* 17 */   public Long getId() { return this.id; } private String officialSite; private String lanName; private VersionDTO version; private List<VersionDTO> versions; private Long installed; private Long downloadMonth; private Long watched; @JsonIgnore private boolean userInstall; @JsonIgnore private boolean populateStatus; private List<GameEntityDependencyDTO> dependencies; private List<GameVersionDTO> gameVersions; private GameVersionDTO lastGameVersion; private Long updated; private Long update; private Long downloadALL; private boolean available; private boolean parser; private long totalComments; public String getName() { return this.name; } public String getAuthor() { return this.author; } public String getUuid() { return this.uuid; } public String getLinkProject() { return this.linkProject; } public String getTlmodsLinkProject() { return this.tlmodsLinkProject; } public Map<String, String> getDescriptions() { return this.descriptions; } public String getShortDescription() { return this.shortDescription; } public String getDescription() { return this.description; } public String getEnDescription() { return this.enDescription; } public boolean isFavorite() { return this.favorite; } public GameType getType() { return this.type; } public List<CategoryDTO> getCategories() { return this.categories; } public List<Category> getCategories1() { return this.categories1; } public List<TagDTO> getTags() { return this.tags; } public Long getPicture() { return this.picture; } public List<Long> getPictures() { return this.pictures; } public String getOfficialSite() { return this.officialSite; } public String getLanName() { return this.lanName; } public VersionDTO getVersion() { return this.version; } public List<VersionDTO> getVersions() { return this.versions; } public Long getInstalled() { return this.installed; } public Long getDownloadMonth() { return this.downloadMonth; } public Long getWatched() { return this.watched; } public boolean isUserInstall() { return this.userInstall; } public boolean isPopulateStatus() { return this.populateStatus; } public List<GameEntityDependencyDTO> getDependencies() { return this.dependencies; } public List<GameVersionDTO> getGameVersions() { return this.gameVersions; } public GameVersionDTO getLastGameVersion() { return this.lastGameVersion; } public Long getUpdated() { return this.updated; } public Long getUpdate() { return this.update; } public Long getDownloadALL() { return this.downloadALL; } public boolean isAvailable() { return this.available; } public boolean isParser() { return this.parser; } public long getTotalComments() { return this.totalComments; } public void setId(Long id) { this.id = id; } public void setName(String name) { this.name = name; } public void setAuthor(String author) { this.author = author; } public void setUuid(String uuid) { this.uuid = uuid; } public void setLinkProject(String linkProject) { this.linkProject = linkProject; } public void setTlmodsLinkProject(String tlmodsLinkProject) { this.tlmodsLinkProject = tlmodsLinkProject; } public void setDescriptions(Map<String, String> descriptions) { this.descriptions = descriptions; } public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; } public void setDescription(String description) { this.description = description; } public void setEnDescription(String enDescription) { this.enDescription = enDescription; } public void setFavorite(boolean favorite) { this.favorite = favorite; } public void setType(GameType type) { this.type = type; } public void setCategories(List<CategoryDTO> categories) { this.categories = categories; } public void setCategories1(List<Category> categories1) { this.categories1 = categories1; } public void setTags(List<TagDTO> tags) { this.tags = tags; } public void setPicture(Long picture) { this.picture = picture; } public void setPictures(List<Long> pictures) { this.pictures = pictures; } public void setOfficialSite(String officialSite) { this.officialSite = officialSite; } public void setLanName(String lanName) { this.lanName = lanName; } public void setVersion(VersionDTO version) { this.version = version; } public void setVersions(List<VersionDTO> versions) { this.versions = versions; } public void setInstalled(Long installed) { this.installed = installed; } public void setDownloadMonth(Long downloadMonth) { this.downloadMonth = downloadMonth; } public void setWatched(Long watched) { this.watched = watched; } @JsonIgnore public void setUserInstall(boolean userInstall) { this.userInstall = userInstall; } @JsonIgnore public void setPopulateStatus(boolean populateStatus) { this.populateStatus = populateStatus; } public void setDependencies(List<GameEntityDependencyDTO> dependencies) { this.dependencies = dependencies; } public void setGameVersions(List<GameVersionDTO> gameVersions) { this.gameVersions = gameVersions; } public void setLastGameVersion(GameVersionDTO lastGameVersion) { this.lastGameVersion = lastGameVersion; } public void setUpdated(Long updated) { this.updated = updated; } public void setUpdate(Long update) { this.update = update; } public void setDownloadALL(Long downloadALL) { this.downloadALL = downloadALL; } public void setAvailable(boolean available) { this.available = available; } public void setParser(boolean parser) { this.parser = parser; } public void setTotalComments(long totalComments) { this.totalComments = totalComments; }
/* 18 */   public String toString() { return "GameEntityDTO(id=" + getId() + ", name=" + getName() + ", author=" + getAuthor() + ", uuid=" + getUuid() + ", linkProject=" + getLinkProject() + ", tlmodsLinkProject=" + getTlmodsLinkProject() + ", descriptions=" + getDescriptions() + ", shortDescription=" + getShortDescription() + ", description=" + getDescription() + ", enDescription=" + getEnDescription() + ", favorite=" + isFavorite() + ", type=" + getType() + ", categories=" + getCategories() + ", categories1=" + getCategories1() + ", tags=" + getTags() + ", picture=" + getPicture() + ", pictures=" + getPictures() + ", officialSite=" + getOfficialSite() + ", lanName=" + getLanName() + ", version=" + getVersion() + ", versions=" + getVersions() + ", installed=" + getInstalled() + ", downloadMonth=" + getDownloadMonth() + ", watched=" + getWatched() + ", userInstall=" + isUserInstall() + ", populateStatus=" + isPopulateStatus() + ", dependencies=" + getDependencies() + ", gameVersions=" + getGameVersions() + ", lastGameVersion=" + getLastGameVersion() + ", updated=" + getUpdated() + ", update=" + getUpdate() + ", downloadALL=" + getDownloadALL() + ", available=" + isAvailable() + ", parser=" + isParser() + ", totalComments=" + getTotalComments() + ")"; }
/* 19 */   public boolean equals(Object o) { if (o == this) return true;  if (!(o instanceof GameEntityDTO)) return false;  GameEntityDTO other = (GameEntityDTO)o; if (!other.canEqual(this)) return false;  if (isFavorite() != other.isFavorite()) return false;  if (isUserInstall() != other.isUserInstall()) return false;  if (isPopulateStatus() != other.isPopulateStatus()) return false;  if (isAvailable() != other.isAvailable()) return false;  if (isParser() != other.isParser()) return false;  if (getTotalComments() != other.getTotalComments()) return false;  Object this$id = getId(), other$id = other.getId(); if ((this$id == null) ? (other$id != null) : !this$id.equals(other$id)) return false;  Object this$picture = getPicture(), other$picture = other.getPicture(); if ((this$picture == null) ? (other$picture != null) : !this$picture.equals(other$picture)) return false;  Object this$installed = getInstalled(), other$installed = other.getInstalled(); if ((this$installed == null) ? (other$installed != null) : !this$installed.equals(other$installed)) return false;  Object this$downloadMonth = getDownloadMonth(), other$downloadMonth = other.getDownloadMonth(); if ((this$downloadMonth == null) ? (other$downloadMonth != null) : !this$downloadMonth.equals(other$downloadMonth)) return false;  Object this$watched = getWatched(), other$watched = other.getWatched(); if ((this$watched == null) ? (other$watched != null) : !this$watched.equals(other$watched)) return false;  Object this$updated = getUpdated(), other$updated = other.getUpdated(); if ((this$updated == null) ? (other$updated != null) : !this$updated.equals(other$updated)) return false;  Object this$update = getUpdate(), other$update = other.getUpdate(); if ((this$update == null) ? (other$update != null) : !this$update.equals(other$update)) return false;  Object this$downloadALL = getDownloadALL(), other$downloadALL = other.getDownloadALL(); if ((this$downloadALL == null) ? (other$downloadALL != null) : !this$downloadALL.equals(other$downloadALL)) return false;  Object this$name = getName(), other$name = other.getName(); if ((this$name == null) ? (other$name != null) : !this$name.equals(other$name)) return false;  Object this$author = getAuthor(), other$author = other.getAuthor(); if ((this$author == null) ? (other$author != null) : !this$author.equals(other$author)) return false;  Object this$uuid = getUuid(), other$uuid = other.getUuid(); if ((this$uuid == null) ? (other$uuid != null) : !this$uuid.equals(other$uuid)) return false;  Object this$linkProject = getLinkProject(), other$linkProject = other.getLinkProject(); if ((this$linkProject == null) ? (other$linkProject != null) : !this$linkProject.equals(other$linkProject)) return false;  Object this$tlmodsLinkProject = getTlmodsLinkProject(), other$tlmodsLinkProject = other.getTlmodsLinkProject(); if ((this$tlmodsLinkProject == null) ? (other$tlmodsLinkProject != null) : !this$tlmodsLinkProject.equals(other$tlmodsLinkProject)) return false;  Object<String, String> this$descriptions = (Object<String, String>)getDescriptions(), other$descriptions = (Object<String, String>)other.getDescriptions(); if ((this$descriptions == null) ? (other$descriptions != null) : !this$descriptions.equals(other$descriptions)) return false;  Object this$shortDescription = getShortDescription(), other$shortDescription = other.getShortDescription(); if ((this$shortDescription == null) ? (other$shortDescription != null) : !this$shortDescription.equals(other$shortDescription)) return false;  Object this$description = getDescription(), other$description = other.getDescription(); if ((this$description == null) ? (other$description != null) : !this$description.equals(other$description)) return false;  Object this$enDescription = getEnDescription(), other$enDescription = other.getEnDescription(); if ((this$enDescription == null) ? (other$enDescription != null) : !this$enDescription.equals(other$enDescription)) return false;  Object this$type = getType(), other$type = other.getType(); if ((this$type == null) ? (other$type != null) : !this$type.equals(other$type)) return false;  Object<CategoryDTO> this$categories = (Object<CategoryDTO>)getCategories(), other$categories = (Object<CategoryDTO>)other.getCategories(); if ((this$categories == null) ? (other$categories != null) : !this$categories.equals(other$categories)) return false;  Object<Category> this$categories1 = (Object<Category>)getCategories1(), other$categories1 = (Object<Category>)other.getCategories1(); if ((this$categories1 == null) ? (other$categories1 != null) : !this$categories1.equals(other$categories1)) return false;  Object<TagDTO> this$tags = (Object<TagDTO>)getTags(), other$tags = (Object<TagDTO>)other.getTags(); if ((this$tags == null) ? (other$tags != null) : !this$tags.equals(other$tags)) return false;  Object<Long> this$pictures = (Object<Long>)getPictures(), other$pictures = (Object<Long>)other.getPictures(); if ((this$pictures == null) ? (other$pictures != null) : !this$pictures.equals(other$pictures)) return false;  Object this$officialSite = getOfficialSite(), other$officialSite = other.getOfficialSite(); if ((this$officialSite == null) ? (other$officialSite != null) : !this$officialSite.equals(other$officialSite)) return false;  Object this$lanName = getLanName(), other$lanName = other.getLanName(); if ((this$lanName == null) ? (other$lanName != null) : !this$lanName.equals(other$lanName)) return false;  Object this$version = getVersion(), other$version = other.getVersion(); if ((this$version == null) ? (other$version != null) : !this$version.equals(other$version)) return false;  Object<VersionDTO> this$versions = (Object<VersionDTO>)getVersions(), other$versions = (Object<VersionDTO>)other.getVersions(); if ((this$versions == null) ? (other$versions != null) : !this$versions.equals(other$versions)) return false;  Object<GameEntityDependencyDTO> this$dependencies = (Object<GameEntityDependencyDTO>)getDependencies(), other$dependencies = (Object<GameEntityDependencyDTO>)other.getDependencies(); if ((this$dependencies == null) ? (other$dependencies != null) : !this$dependencies.equals(other$dependencies)) return false;  Object<GameVersionDTO> this$gameVersions = (Object<GameVersionDTO>)getGameVersions(), other$gameVersions = (Object<GameVersionDTO>)other.getGameVersions(); if ((this$gameVersions == null) ? (other$gameVersions != null) : !this$gameVersions.equals(other$gameVersions)) return false;  Object this$lastGameVersion = getLastGameVersion(), other$lastGameVersion = other.getLastGameVersion(); return !((this$lastGameVersion == null) ? (other$lastGameVersion != null) : !this$lastGameVersion.equals(other$lastGameVersion)); } protected boolean canEqual(Object other) { return other instanceof GameEntityDTO; } public int hashCode() { int PRIME = 59; result = 1; result = result * 59 + (isFavorite() ? 79 : 97); result = result * 59 + (isUserInstall() ? 79 : 97); result = result * 59 + (isPopulateStatus() ? 79 : 97); result = result * 59 + (isAvailable() ? 79 : 97); result = result * 59 + (isParser() ? 79 : 97); long $totalComments = getTotalComments(); result = result * 59 + (int)($totalComments ^ $totalComments >>> 32L); Object $id = getId(); result = result * 59 + (($id == null) ? 43 : $id.hashCode()); Object $picture = getPicture(); result = result * 59 + (($picture == null) ? 43 : $picture.hashCode()); Object $installed = getInstalled(); result = result * 59 + (($installed == null) ? 43 : $installed.hashCode()); Object $downloadMonth = getDownloadMonth(); result = result * 59 + (($downloadMonth == null) ? 43 : $downloadMonth.hashCode()); Object $watched = getWatched(); result = result * 59 + (($watched == null) ? 43 : $watched.hashCode()); Object $updated = getUpdated(); result = result * 59 + (($updated == null) ? 43 : $updated.hashCode()); Object $update = getUpdate(); result = result * 59 + (($update == null) ? 43 : $update.hashCode()); Object $downloadALL = getDownloadALL(); result = result * 59 + (($downloadALL == null) ? 43 : $downloadALL.hashCode()); Object $name = getName(); result = result * 59 + (($name == null) ? 43 : $name.hashCode()); Object $author = getAuthor(); result = result * 59 + (($author == null) ? 43 : $author.hashCode()); Object $uuid = getUuid(); result = result * 59 + (($uuid == null) ? 43 : $uuid.hashCode()); Object $linkProject = getLinkProject(); result = result * 59 + (($linkProject == null) ? 43 : $linkProject.hashCode()); Object $tlmodsLinkProject = getTlmodsLinkProject(); result = result * 59 + (($tlmodsLinkProject == null) ? 43 : $tlmodsLinkProject.hashCode()); Object<String, String> $descriptions = (Object<String, String>)getDescriptions(); result = result * 59 + (($descriptions == null) ? 43 : $descriptions.hashCode()); Object $shortDescription = getShortDescription(); result = result * 59 + (($shortDescription == null) ? 43 : $shortDescription.hashCode()); Object $description = getDescription(); result = result * 59 + (($description == null) ? 43 : $description.hashCode()); Object $enDescription = getEnDescription(); result = result * 59 + (($enDescription == null) ? 43 : $enDescription.hashCode()); Object $type = getType(); result = result * 59 + (($type == null) ? 43 : $type.hashCode()); Object<CategoryDTO> $categories = (Object<CategoryDTO>)getCategories(); result = result * 59 + (($categories == null) ? 43 : $categories.hashCode()); Object<Category> $categories1 = (Object<Category>)getCategories1(); result = result * 59 + (($categories1 == null) ? 43 : $categories1.hashCode()); Object<TagDTO> $tags = (Object<TagDTO>)getTags(); result = result * 59 + (($tags == null) ? 43 : $tags.hashCode()); Object<Long> $pictures = (Object<Long>)getPictures(); result = result * 59 + (($pictures == null) ? 43 : $pictures.hashCode()); Object $officialSite = getOfficialSite(); result = result * 59 + (($officialSite == null) ? 43 : $officialSite.hashCode()); Object $lanName = getLanName(); result = result * 59 + (($lanName == null) ? 43 : $lanName.hashCode()); Object $version = getVersion(); result = result * 59 + (($version == null) ? 43 : $version.hashCode()); Object<VersionDTO> $versions = (Object<VersionDTO>)getVersions(); result = result * 59 + (($versions == null) ? 43 : $versions.hashCode()); Object<GameEntityDependencyDTO> $dependencies = (Object<GameEntityDependencyDTO>)getDependencies(); result = result * 59 + (($dependencies == null) ? 43 : $dependencies.hashCode()); Object<GameVersionDTO> $gameVersions = (Object<GameVersionDTO>)getGameVersions(); result = result * 59 + (($gameVersions == null) ? 43 : $gameVersions.hashCode()); Object $lastGameVersion = getLastGameVersion(); return result * 59 + (($lastGameVersion == null) ? 43 : $lastGameVersion.hashCode()); }
/*    */    }


/* Location:              /home/khang/Downloads/tlaucher/Tlaucher.jar-decompiled/!/org/tlauncher/modpack/domain/client/GameEntityDTO.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */